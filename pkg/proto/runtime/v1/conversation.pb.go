//
//Copyright 2021 The Dapr Authors
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//http://www.apache.org/licenses/LICENSE-2.0
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.4
// source: dapr/proto/runtime/v1/conversation.proto

package runtime

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ConversationRequest is the request object for Conversation.
// Many of these fields are inspired by openai.ChatCompletionNewParams
// https://github.com/openai/openai-go/blob/main/chatcompletion.go#L2106
type ConversationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of Conversation component
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The ID of an existing chat (like in ChatGPT)
	ContextID *string `protobuf:"bytes,2,opt,name=contextID,proto3,oneof" json:"contextID,omitempty"`
	// Inputs for the conversation, support multiple input in one time.
	Inputs []*ConversationInput `protobuf:"bytes,3,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// Parameters for all custom fields.
	Parameters map[string]*anypb.Any `protobuf:"bytes,4,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The metadata passing to conversation components.
	Metadata map[string]string `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Scrub PII data that comes back from the LLM
	ScrubPII *bool `protobuf:"varint,6,opt,name=scrubPII,proto3,oneof" json:"scrubPII,omitempty"`
	// Temperature for the LLM to optimize for creativity or predictability
	Temperature *float64 `protobuf:"fixed64,7,opt,name=temperature,proto3,oneof" json:"temperature,omitempty"`
	// Tools register the tools available to be used by the LLM during the conversation.
	// These are sent on a per request basis.
	// The tools available during the first round of the conversation
	// may be different than tools specified later on.
	Tools []*ConversationTools `protobuf:"bytes,8,rep,name=tools,proto3" json:"tools,omitempty"`
	// Controls which (if any) tool is called by the model.
	// `none` means the model will not call any tool and instead generates a message.
	// `auto` means the model can pick between generating a message or calling one or more tools.
	// `required` means the model must call one or more tools.
	// Specifying a particular tool via:
	// `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that tool.
	// `none` is the default when no tools are present.
	// `auto` is the default if tools are present.
	ToolChoice *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=tool_choice,json=toolChoice,proto3,oneof" json:"tool_choice,omitempty"`
}

func (x *ConversationRequest) Reset() {
	*x = ConversationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapr_proto_runtime_v1_conversation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationRequest) ProtoMessage() {}

func (x *ConversationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dapr_proto_runtime_v1_conversation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationRequest.ProtoReflect.Descriptor instead.
func (*ConversationRequest) Descriptor() ([]byte, []int) {
	return file_dapr_proto_runtime_v1_conversation_proto_rawDescGZIP(), []int{0}
}

func (x *ConversationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConversationRequest) GetContextID() string {
	if x != nil && x.ContextID != nil {
		return *x.ContextID
	}
	return ""
}

func (x *ConversationRequest) GetInputs() []*ConversationInput {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *ConversationRequest) GetParameters() map[string]*anypb.Any {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *ConversationRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ConversationRequest) GetScrubPII() bool {
	if x != nil && x.ScrubPII != nil {
		return *x.ScrubPII
	}
	return false
}

func (x *ConversationRequest) GetTemperature() float64 {
	if x != nil && x.Temperature != nil {
		return *x.Temperature
	}
	return 0
}

func (x *ConversationRequest) GetTools() []*ConversationTools {
	if x != nil {
		return x.Tools
	}
	return nil
}

func (x *ConversationRequest) GetToolChoice() *wrapperspb.StringValue {
	if x != nil {
		return x.ToolChoice
	}
	return nil
}

// directly inspired by openai.
// https://github.com/openai/openai-go/blob/main/chatcompletion.go#L1449
type ConversationInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The content to send to the llm
	// TODO(@Sicoyle): should be typed and be one of look at ex
	Messages []*ConversationMessage `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	// The role to set for the message
	// TODO: get insights here. OpenAI wraps messages so each msg can have a role 1:1,
	// but in the case of messages containing tool call response data then it's like the role of the conversation is continually changing,
	// and tool specific so this is still awkward (regardless of if we leave or change this).
	// reference: https://github.com/openai/openai-go/blob/main/chatcompletion.go#L1449
	Role *string `protobuf:"bytes,2,opt,name=role,proto3,oneof" json:"role,omitempty"`
	// Scrub PII data that goes into the LLM
	ScrubPII *bool `protobuf:"varint,3,opt,name=scrubPII,proto3,oneof" json:"scrubPII,omitempty"`
}

func (x *ConversationInput) Reset() {
	*x = ConversationInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapr_proto_runtime_v1_conversation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationInput) ProtoMessage() {}

func (x *ConversationInput) ProtoReflect() protoreflect.Message {
	mi := &file_dapr_proto_runtime_v1_conversation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationInput.ProtoReflect.Descriptor instead.
func (*ConversationInput) Descriptor() ([]byte, []int) {
	return file_dapr_proto_runtime_v1_conversation_proto_rawDescGZIP(), []int{1}
}

func (x *ConversationInput) GetMessages() []*ConversationMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *ConversationInput) GetRole() string {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return ""
}

func (x *ConversationInput) GetScrubPII() bool {
	if x != nil && x.ScrubPII != nil {
		return *x.ScrubPII
	}
	return false
}

// inspired by openai.ChatCompletionMessageParamUnion
// https://github.com/openai/openai-go/blob/main/chatcompletion.go#L1449
type ConversationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to MessageTypes:
	//
	//	*ConversationMessage_OfDeveloper
	//	*ConversationMessage_OfSystem
	//	*ConversationMessage_OfUser
	//	*ConversationMessage_OfAssistant
	//	*ConversationMessage_OfTool
	MessageTypes isConversationMessage_MessageTypes `protobuf_oneof:"message_types"`
}

func (x *ConversationMessage) Reset() {
	*x = ConversationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapr_proto_runtime_v1_conversation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationMessage) ProtoMessage() {}

func (x *ConversationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_dapr_proto_runtime_v1_conversation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationMessage.ProtoReflect.Descriptor instead.
func (*ConversationMessage) Descriptor() ([]byte, []int) {
	return file_dapr_proto_runtime_v1_conversation_proto_rawDescGZIP(), []int{2}
}

func (m *ConversationMessage) GetMessageTypes() isConversationMessage_MessageTypes {
	if m != nil {
		return m.MessageTypes
	}
	return nil
}

func (x *ConversationMessage) GetOfDeveloper() *ConversationMessageOfDeveloper {
	if x, ok := x.GetMessageTypes().(*ConversationMessage_OfDeveloper); ok {
		return x.OfDeveloper
	}
	return nil
}

func (x *ConversationMessage) GetOfSystem() *ConversationMessageOfSystem {
	if x, ok := x.GetMessageTypes().(*ConversationMessage_OfSystem); ok {
		return x.OfSystem
	}
	return nil
}

func (x *ConversationMessage) GetOfUser() *ConversationMessageOfUser {
	if x, ok := x.GetMessageTypes().(*ConversationMessage_OfUser); ok {
		return x.OfUser
	}
	return nil
}

func (x *ConversationMessage) GetOfAssistant() *ConversationMessageOfAssistant {
	if x, ok := x.GetMessageTypes().(*ConversationMessage_OfAssistant); ok {
		return x.OfAssistant
	}
	return nil
}

func (x *ConversationMessage) GetOfTool() *ConversationMessageOfTool {
	if x, ok := x.GetMessageTypes().(*ConversationMessage_OfTool); ok {
		return x.OfTool
	}
	return nil
}

type isConversationMessage_MessageTypes interface {
	isConversationMessage_MessageTypes()
}

type ConversationMessage_OfDeveloper struct {
	OfDeveloper *ConversationMessageOfDeveloper `protobuf:"bytes,1,opt,name=of_developer,json=ofDeveloper,proto3,oneof"`
}

type ConversationMessage_OfSystem struct {
	OfSystem *ConversationMessageOfSystem `protobuf:"bytes,2,opt,name=of_system,json=ofSystem,proto3,oneof"`
}

type ConversationMessage_OfUser struct {
	OfUser *ConversationMessageOfUser `protobuf:"bytes,3,opt,name=of_user,json=ofUser,proto3,oneof"`
}

type ConversationMessage_OfAssistant struct {
	OfAssistant *ConversationMessageOfAssistant `protobuf:"bytes,4,opt,name=of_assistant,json=ofAssistant,proto3,oneof"`
}

type ConversationMessage_OfTool struct {
	OfTool *ConversationMessageOfTool `protobuf:"bytes,5,opt,name=of_tool,json=ofTool,proto3,oneof"`
}

func (*ConversationMessage_OfDeveloper) isConversationMessage_MessageTypes() {}

func (*ConversationMessage_OfSystem) isConversationMessage_MessageTypes() {}

func (*ConversationMessage_OfUser) isConversationMessage_MessageTypes() {}

func (*ConversationMessage_OfAssistant) isConversationMessage_MessageTypes() {}

func (*ConversationMessage_OfTool) isConversationMessage_MessageTypes() {}

// inspired by openai.ChatCompletionDeveloperMessageParam
// https://github.com/openai/openai-go/blob/main/chatcompletion.go#L1130
type ConversationMessageOfDeveloper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    *wrapperspb.StringValue              `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Role    *wrapperspb.StringValue              `protobuf:"bytes,2,opt,name=role,proto3,oneof" json:"role,omitempty"`
	Content []*ConversationContentMessageContent `protobuf:"bytes,3,rep,name=Content,proto3" json:"Content,omitempty"`
}

func (x *ConversationMessageOfDeveloper) Reset() {
	*x = ConversationMessageOfDeveloper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapr_proto_runtime_v1_conversation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationMessageOfDeveloper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationMessageOfDeveloper) ProtoMessage() {}

func (x *ConversationMessageOfDeveloper) ProtoReflect() protoreflect.Message {
	mi := &file_dapr_proto_runtime_v1_conversation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationMessageOfDeveloper.ProtoReflect.Descriptor instead.
func (*ConversationMessageOfDeveloper) Descriptor() ([]byte, []int) {
	return file_dapr_proto_runtime_v1_conversation_proto_rawDescGZIP(), []int{3}
}

func (x *ConversationMessageOfDeveloper) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ConversationMessageOfDeveloper) GetRole() *wrapperspb.StringValue {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *ConversationMessageOfDeveloper) GetContent() []*ConversationContentMessageContent {
	if x != nil {
		return x.Content
	}
	return nil
}

// inspired by openai.ChatCompletionSystemMessageParam
// https://github.com/openai/openai-go/blob/main/chatcompletion.go#L1842
type ConversationMessageOfSystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    *wrapperspb.StringValue              `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Role    *wrapperspb.StringValue              `protobuf:"bytes,2,opt,name=role,proto3,oneof" json:"role,omitempty"`
	Content []*ConversationContentMessageContent `protobuf:"bytes,3,rep,name=Content,proto3" json:"Content,omitempty"`
}

func (x *ConversationMessageOfSystem) Reset() {
	*x = ConversationMessageOfSystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapr_proto_runtime_v1_conversation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationMessageOfSystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationMessageOfSystem) ProtoMessage() {}

func (x *ConversationMessageOfSystem) ProtoReflect() protoreflect.Message {
	mi := &file_dapr_proto_runtime_v1_conversation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationMessageOfSystem.ProtoReflect.Descriptor instead.
func (*ConversationMessageOfSystem) Descriptor() ([]byte, []int) {
	return file_dapr_proto_runtime_v1_conversation_proto_rawDescGZIP(), []int{4}
}

func (x *ConversationMessageOfSystem) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ConversationMessageOfSystem) GetRole() *wrapperspb.StringValue {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *ConversationMessageOfSystem) GetContent() []*ConversationContentMessageContent {
	if x != nil {
		return x.Content
	}
	return nil
}

// inspired by openai.ChatCompletionUserMessageParam
// https://github.com/openai/openai-go/blob/main/chatcompletion.go#L2060C6-L2060C36
type ConversationMessageOfUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    *wrapperspb.StringValue              `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Role    *wrapperspb.StringValue              `protobuf:"bytes,2,opt,name=role,proto3,oneof" json:"role,omitempty"`
	Content []*ConversationContentMessageContent `protobuf:"bytes,3,rep,name=Content,proto3" json:"Content,omitempty"`
}

func (x *ConversationMessageOfUser) Reset() {
	*x = ConversationMessageOfUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapr_proto_runtime_v1_conversation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationMessageOfUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationMessageOfUser) ProtoMessage() {}

func (x *ConversationMessageOfUser) ProtoReflect() protoreflect.Message {
	mi := &file_dapr_proto_runtime_v1_conversation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationMessageOfUser.ProtoReflect.Descriptor instead.
func (*ConversationMessageOfUser) Descriptor() ([]byte, []int) {
	return file_dapr_proto_runtime_v1_conversation_proto_rawDescGZIP(), []int{5}
}

func (x *ConversationMessageOfUser) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ConversationMessageOfUser) GetRole() *wrapperspb.StringValue {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *ConversationMessageOfUser) GetContent() []*ConversationContentMessageContent {
	if x != nil {
		return x.Content
	}
	return nil
}

// inspired by openai.ChatCompletionAssistantMessageParam
// https://github.com/openai/openai-go/blob/main/chatcompletion.go#L310
type ConversationMessageOfAssistant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Refusal   *wrapperspb.StringValue              `protobuf:"bytes,1,opt,name=refusal,proto3" json:"refusal,omitempty"` // optional? no idea
	Name      *wrapperspb.StringValue              `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Content   []*ConversationContentMessageContent `protobuf:"bytes,3,rep,name=Content,proto3" json:"Content,omitempty"` // TODO(@Sicoyle): FIX THIS this is a diff content type wtf
	ToolCalls *ConversationToolCalls               `protobuf:"bytes,4,opt,name=tool_calls,json=toolCalls,proto3" json:"tool_calls,omitempty"`
}

func (x *ConversationMessageOfAssistant) Reset() {
	*x = ConversationMessageOfAssistant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapr_proto_runtime_v1_conversation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationMessageOfAssistant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationMessageOfAssistant) ProtoMessage() {}

func (x *ConversationMessageOfAssistant) ProtoReflect() protoreflect.Message {
	mi := &file_dapr_proto_runtime_v1_conversation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationMessageOfAssistant.ProtoReflect.Descriptor instead.
func (*ConversationMessageOfAssistant) Descriptor() ([]byte, []int) {
	return file_dapr_proto_runtime_v1_conversation_proto_rawDescGZIP(), []int{6}
}

func (x *ConversationMessageOfAssistant) GetRefusal() *wrapperspb.StringValue {
	if x != nil {
		return x.Refusal
	}
	return nil
}

func (x *ConversationMessageOfAssistant) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ConversationMessageOfAssistant) GetContent() []*ConversationContentMessageContent {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *ConversationMessageOfAssistant) GetToolCalls() *ConversationToolCalls {
	if x != nil {
		return x.ToolCalls
	}
	return nil
}

// inspired by openai.ChatCompletionToolMessageParam
// https://github.com/openai/openai-go/blob/main/chatcompletion.go#L2011
type ConversationMessageOfTool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToolId  *wrapperspb.StringValue              `protobuf:"bytes,1,opt,name=tool_id,json=toolId,proto3,oneof" json:"tool_id,omitempty"`
	Role    *wrapperspb.StringValue              `protobuf:"bytes,2,opt,name=role,proto3,oneof" json:"role,omitempty"`
	Content []*ConversationContentMessageContent `protobuf:"bytes,3,rep,name=Content,proto3" json:"Content,omitempty"`
}

func (x *ConversationMessageOfTool) Reset() {
	*x = ConversationMessageOfTool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapr_proto_runtime_v1_conversation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationMessageOfTool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationMessageOfTool) ProtoMessage() {}

func (x *ConversationMessageOfTool) ProtoReflect() protoreflect.Message {
	mi := &file_dapr_proto_runtime_v1_conversation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationMessageOfTool.ProtoReflect.Descriptor instead.
func (*ConversationMessageOfTool) Descriptor() ([]byte, []int) {
	return file_dapr_proto_runtime_v1_conversation_proto_rawDescGZIP(), []int{7}
}

func (x *ConversationMessageOfTool) GetToolId() *wrapperspb.StringValue {
	if x != nil {
		return x.ToolId
	}
	return nil
}

func (x *ConversationMessageOfTool) GetRole() *wrapperspb.StringValue {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *ConversationMessageOfTool) GetContent() []*ConversationContentMessageContent {
	if x != nil {
		return x.Content
	}
	return nil
}

// inspired by openai.ChatCompletionMessageToolCallParam
// https://github.com/openai/openai-go/blob/main/chatcompletion.go#L1669
type ConversationToolCalls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	// TODO: bring out to diff msg below here as a one of for us
	Function *ConversationFunctionCall `protobuf:"bytes,2,opt,name=function,proto3" json:"function,omitempty"`
	Type     *wrapperspb.StringValue   `protobuf:"bytes,3,opt,name=type,proto3,oneof" json:"type,omitempty"` // backend will default to "function", but optional for future
}

func (x *ConversationToolCalls) Reset() {
	*x = ConversationToolCalls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapr_proto_runtime_v1_conversation_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationToolCalls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationToolCalls) ProtoMessage() {}

func (x *ConversationToolCalls) ProtoReflect() protoreflect.Message {
	mi := &file_dapr_proto_runtime_v1_conversation_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationToolCalls.ProtoReflect.Descriptor instead.
func (*ConversationToolCalls) Descriptor() ([]byte, []int) {
	return file_dapr_proto_runtime_v1_conversation_proto_rawDescGZIP(), []int{8}
}

func (x *ConversationToolCalls) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConversationToolCalls) GetFunction() *ConversationFunctionCall {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *ConversationToolCalls) GetType() *wrapperspb.StringValue {
	if x != nil {
		return x.Type
	}
	return nil
}

// inspired by openai.ChatCompletionMessageToolCallFunctionParam
// https://github.com/openai/openai-go/blob/main/chatcompletion.go#L1692
type ConversationFunctionCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Arguments map[string]*anypb.Any   `protobuf:"bytes,2,rep,name=arguments,proto3" json:"arguments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ConversationFunctionCall) Reset() {
	*x = ConversationFunctionCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapr_proto_runtime_v1_conversation_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationFunctionCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationFunctionCall) ProtoMessage() {}

func (x *ConversationFunctionCall) ProtoReflect() protoreflect.Message {
	mi := &file_dapr_proto_runtime_v1_conversation_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationFunctionCall.ProtoReflect.Descriptor instead.
func (*ConversationFunctionCall) Descriptor() ([]byte, []int) {
	return file_dapr_proto_runtime_v1_conversation_proto_rawDescGZIP(), []int{9}
}

func (x *ConversationFunctionCall) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ConversationFunctionCall) GetArguments() map[string]*anypb.Any {
	if x != nil {
		return x.Arguments
	}
	return nil
}

// inspired by openai.ChatCompletionContentPartTextParam & openai.ChatCompletionDeveloperMessageParamContentUnion
// https://github.com/openai/openai-go/blob/main/chatcompletion.go#L1084
// https://github.com/openai/openai-go/blob/main/chatcompletion.go#L1154C6-L1154C53
// Note: openai has this message be either a message of string or message of array type,
// so instead of this, we support that in one message type instead.
type ConversationContentMessageContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Type *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=type,proto3,oneof" json:"type,omitempty"` // do i keep this or just default backend to text?
}

func (x *ConversationContentMessageContent) Reset() {
	*x = ConversationContentMessageContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapr_proto_runtime_v1_conversation_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationContentMessageContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationContentMessageContent) ProtoMessage() {}

func (x *ConversationContentMessageContent) ProtoReflect() protoreflect.Message {
	mi := &file_dapr_proto_runtime_v1_conversation_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationContentMessageContent.ProtoReflect.Descriptor instead.
func (*ConversationContentMessageContent) Descriptor() ([]byte, []int) {
	return file_dapr_proto_runtime_v1_conversation_proto_rawDescGZIP(), []int{10}
}

func (x *ConversationContentMessageContent) GetText() *wrapperspb.StringValue {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *ConversationContentMessageContent) GetType() *wrapperspb.StringValue {
	if x != nil {
		return x.Type
	}
	return nil
}

// ConversationTools are the typed tools available to be called.
type ConversationTools struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ToolTypes:
	//
	//	*ConversationTools_Function
	ToolTypes isConversationTools_ToolTypes `protobuf_oneof:"tool_types"`
}

func (x *ConversationTools) Reset() {
	*x = ConversationTools{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapr_proto_runtime_v1_conversation_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationTools) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationTools) ProtoMessage() {}

func (x *ConversationTools) ProtoReflect() protoreflect.Message {
	mi := &file_dapr_proto_runtime_v1_conversation_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationTools.ProtoReflect.Descriptor instead.
func (*ConversationTools) Descriptor() ([]byte, []int) {
	return file_dapr_proto_runtime_v1_conversation_proto_rawDescGZIP(), []int{11}
}

func (m *ConversationTools) GetToolTypes() isConversationTools_ToolTypes {
	if m != nil {
		return m.ToolTypes
	}
	return nil
}

func (x *ConversationTools) GetFunction() *ConversationToolsFunction {
	if x, ok := x.GetToolTypes().(*ConversationTools_Function); ok {
		return x.Function
	}
	return nil
}

type isConversationTools_ToolTypes interface {
	isConversationTools_ToolTypes()
}

type ConversationTools_Function struct {
	Function *ConversationToolsFunction `protobuf:"bytes,1,opt,name=function,proto3,oneof"`
}

func (*ConversationTools_Function) isConversationTools_ToolTypes() {}

// ConversationToolsFunction is the main tool type to be used in a conversation.
// This type reflects the openai.FunctionDefinitionParam type exactly.
// https://pkg.go.dev/github.com/openai/openai-go/shared#FunctionDefinitionParam
type ConversationToolsFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the function to be called.
	Name *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A description of what the function does,
	// used by the model to choose when and how to call the function.
	Description *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// The parameters the functions accepts, described as a JSON Schema object. See the
	// [guide](https://platform.openai.com/docs/guides/function-calling) for examples,
	// and the
	// [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for
	// documentation about the format.
	//
	// Omitting `parameters` defines a function with an empty parameter list.
	Parameters map[string]*anypb.Any `protobuf:"bytes,4,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ConversationToolsFunction) Reset() {
	*x = ConversationToolsFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapr_proto_runtime_v1_conversation_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationToolsFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationToolsFunction) ProtoMessage() {}

func (x *ConversationToolsFunction) ProtoReflect() protoreflect.Message {
	mi := &file_dapr_proto_runtime_v1_conversation_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationToolsFunction.ProtoReflect.Descriptor instead.
func (*ConversationToolsFunction) Descriptor() ([]byte, []int) {
	return file_dapr_proto_runtime_v1_conversation_proto_rawDescGZIP(), []int{12}
}

func (x *ConversationToolsFunction) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ConversationToolsFunction) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ConversationToolsFunction) GetParameters() map[string]*anypb.Any {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// ConversationResult is the result for one input.
type ConversationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result for the one conversation input.
	// string result = 1; // was string before
	Choices *ConversationResultChoices `protobuf:"bytes,1,opt,name=choices,proto3" json:"choices,omitempty"`
	// Parameters for all custom fields.
	Parameters map[string]*anypb.Any `protobuf:"bytes,2,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ConversationResult) Reset() {
	*x = ConversationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapr_proto_runtime_v1_conversation_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationResult) ProtoMessage() {}

func (x *ConversationResult) ProtoReflect() protoreflect.Message {
	mi := &file_dapr_proto_runtime_v1_conversation_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationResult.ProtoReflect.Descriptor instead.
func (*ConversationResult) Descriptor() ([]byte, []int) {
	return file_dapr_proto_runtime_v1_conversation_proto_rawDescGZIP(), []int{13}
}

func (x *ConversationResult) GetChoices() *ConversationResultChoices {
	if x != nil {
		return x.Choices
	}
	return nil
}

func (x *ConversationResult) GetParameters() map[string]*anypb.Any {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// based on https://github.com/openai/openai-go/blob/main/chatcompletion.go#L226
type ConversationResultChoices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinishReason *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=finish_reason,json=finishReason,proto3" json:"finish_reason,omitempty"`
	Index        int64                   `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Message      *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ConversationResultChoices) Reset() {
	*x = ConversationResultChoices{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapr_proto_runtime_v1_conversation_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationResultChoices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationResultChoices) ProtoMessage() {}

func (x *ConversationResultChoices) ProtoReflect() protoreflect.Message {
	mi := &file_dapr_proto_runtime_v1_conversation_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationResultChoices.ProtoReflect.Descriptor instead.
func (*ConversationResultChoices) Descriptor() ([]byte, []int) {
	return file_dapr_proto_runtime_v1_conversation_proto_rawDescGZIP(), []int{14}
}

func (x *ConversationResultChoices) GetFinishReason() *wrapperspb.StringValue {
	if x != nil {
		return x.FinishReason
	}
	return nil
}

func (x *ConversationResultChoices) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ConversationResultChoices) GetMessage() *wrapperspb.StringValue {
	if x != nil {
		return x.Message
	}
	return nil
}

// ConversationResponse is the response for Conversation.
type ConversationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of an existing chat (like in ChatGPT)
	ContextID *string `protobuf:"bytes,1,opt,name=contextID,proto3,oneof" json:"contextID,omitempty"`
	// An array of results.
	Outputs []*ConversationResult `protobuf:"bytes,2,rep,name=outputs,proto3" json:"outputs,omitempty"`
}

func (x *ConversationResponse) Reset() {
	*x = ConversationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapr_proto_runtime_v1_conversation_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationResponse) ProtoMessage() {}

func (x *ConversationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dapr_proto_runtime_v1_conversation_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationResponse.ProtoReflect.Descriptor instead.
func (*ConversationResponse) Descriptor() ([]byte, []int) {
	return file_dapr_proto_runtime_v1_conversation_proto_rawDescGZIP(), []int{15}
}

func (x *ConversationResponse) GetContextID() string {
	if x != nil && x.ContextID != nil {
		return *x.ContextID
	}
	return ""
}

func (x *ConversationResponse) GetOutputs() []*ConversationResult {
	if x != nil {
		return x.Outputs
	}
	return nil
}

var File_dapr_proto_runtime_v1_conversation_proto protoreflect.FileDescriptor

var file_dapr_proto_runtime_v1_conversation_proto_rawDesc = []byte{
	0x0a, 0x28, 0x64, 0x61, 0x70, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x64, 0x61, 0x70, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd9, 0x05, 0x0a,
	0x13, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x06, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x61,
	0x70, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x5a, 0x0a,
	0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x64, 0x61, 0x70, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x54, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x64, 0x61,
	0x70, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x1f, 0x0a, 0x08, 0x73, 0x63, 0x72, 0x75, 0x62, 0x50, 0x49, 0x49, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x01, 0x52, 0x08, 0x73, 0x63, 0x72, 0x75, 0x62, 0x50, 0x49, 0x49, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x05, 0x74, 0x6f, 0x6f, 0x6c, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x61, 0x70, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6f, 0x6c, 0x73,
	0x52, 0x05, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x42, 0x0a, 0x0b, 0x74, 0x6f, 0x6f, 0x6c, 0x5f,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x03, 0x52, 0x0a, 0x74, 0x6f,
	0x6f, 0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x53, 0x0a, 0x0f, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x73, 0x63, 0x72, 0x75, 0x62, 0x50, 0x49, 0x49, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x6f, 0x6f,
	0x6c, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x46,
	0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x64, 0x61, 0x70, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x73, 0x63, 0x72, 0x75, 0x62, 0x50, 0x49, 0x49, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x01, 0x52, 0x08, 0x73, 0x63, 0x72, 0x75, 0x62, 0x50, 0x49, 0x49, 0x88, 0x01, 0x01,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x63,
	0x72, 0x75, 0x62, 0x50, 0x49, 0x49, 0x22, 0xcb, 0x03, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5a,
	0x0a, 0x0c, 0x6f, 0x66, 0x5f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x64, 0x61, 0x70, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x4f, 0x66, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x6f,
	0x66, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x09, 0x6f, 0x66,
	0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x64, 0x61, 0x70, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x66, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x66, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x4b, 0x0a,
	0x07, 0x6f, 0x66, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x64, 0x61, 0x70, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x55, 0x73, 0x65, 0x72, 0x12, 0x5a, 0x0a, 0x0c, 0x6f, 0x66,
	0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x64, 0x61, 0x70, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x66, 0x41, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x66, 0x41, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x07, 0x6f, 0x66, 0x5f, 0x74, 0x6f, 0x6f,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x61, 0x70, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x4f, 0x66, 0x54, 0x6f, 0x6f, 0x6c, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x54,
	0x6f, 0x6f, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x22, 0xf4, 0x01, 0x0a, 0x1e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x66, 0x44, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x64, 0x61, 0x70, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0xf1, 0x01, 0x0a, 0x1b,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x4f, 0x66, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x35, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x35, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01,
	0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x64, 0x61, 0x70,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x22,
	0xef, 0x01, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x72, 0x12, 0x35, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x01, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x64,
	0x61, 0x70, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x72, 0x6f, 0x6c,
	0x65, 0x22, 0xb9, 0x02, 0x0a, 0x1e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x66, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x75, 0x73, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x07, 0x72, 0x65, 0x66, 0x75, 0x73, 0x61, 0x6c, 0x12, 0x35, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x64, 0x61, 0x70, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x0a, 0x74, 0x6f, 0x6f, 0x6c, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x61,
	0x70, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x09, 0x74, 0x6f, 0x6f, 0x6c, 0x43,
	0x61, 0x6c, 0x6c, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xf7, 0x01,
	0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x66, 0x54, 0x6f, 0x6f, 0x6c, 0x12, 0x3a, 0x0a, 0x07, 0x74,
	0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x06, 0x74, 0x6f,
	0x6f, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x52,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x64, 0x61, 0x70, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0xde, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c,
	0x73, 0x12, 0x31, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x61, 0x70, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xfe, 0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x64, 0x61, 0x70,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x41, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x52, 0x0a, 0x0e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x95, 0x01, 0x0a, 0x21, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x30, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x71, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x4e, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x61, 0x70, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6f,
	0x6c, 0x73, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x22, 0xd9, 0x02, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x60, 0x0a, 0x0a, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e,
	0x64, 0x61, 0x70, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x53, 0x0a, 0x0f, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x90, 0x02, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4a, 0x0a, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x61, 0x70, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x52, 0x07, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64, 0x61, 0x70, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x53,
	0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xac, 0x01, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x41, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x43,
	0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x64, 0x61, 0x70, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49,
	0x44, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x64, 0x61, 0x70, 0x72, 0x2f, 0x64, 0x61, 0x70, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dapr_proto_runtime_v1_conversation_proto_rawDescOnce sync.Once
	file_dapr_proto_runtime_v1_conversation_proto_rawDescData = file_dapr_proto_runtime_v1_conversation_proto_rawDesc
)

func file_dapr_proto_runtime_v1_conversation_proto_rawDescGZIP() []byte {
	file_dapr_proto_runtime_v1_conversation_proto_rawDescOnce.Do(func() {
		file_dapr_proto_runtime_v1_conversation_proto_rawDescData = protoimpl.X.CompressGZIP(file_dapr_proto_runtime_v1_conversation_proto_rawDescData)
	})
	return file_dapr_proto_runtime_v1_conversation_proto_rawDescData
}

var file_dapr_proto_runtime_v1_conversation_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_dapr_proto_runtime_v1_conversation_proto_goTypes = []interface{}{
	(*ConversationRequest)(nil),               // 0: dapr.proto.runtime.v1.ConversationRequest
	(*ConversationInput)(nil),                 // 1: dapr.proto.runtime.v1.ConversationInput
	(*ConversationMessage)(nil),               // 2: dapr.proto.runtime.v1.ConversationMessage
	(*ConversationMessageOfDeveloper)(nil),    // 3: dapr.proto.runtime.v1.ConversationMessageOfDeveloper
	(*ConversationMessageOfSystem)(nil),       // 4: dapr.proto.runtime.v1.ConversationMessageOfSystem
	(*ConversationMessageOfUser)(nil),         // 5: dapr.proto.runtime.v1.ConversationMessageOfUser
	(*ConversationMessageOfAssistant)(nil),    // 6: dapr.proto.runtime.v1.ConversationMessageOfAssistant
	(*ConversationMessageOfTool)(nil),         // 7: dapr.proto.runtime.v1.ConversationMessageOfTool
	(*ConversationToolCalls)(nil),             // 8: dapr.proto.runtime.v1.ConversationToolCalls
	(*ConversationFunctionCall)(nil),          // 9: dapr.proto.runtime.v1.ConversationFunctionCall
	(*ConversationContentMessageContent)(nil), // 10: dapr.proto.runtime.v1.ConversationContentMessageContent
	(*ConversationTools)(nil),                 // 11: dapr.proto.runtime.v1.ConversationTools
	(*ConversationToolsFunction)(nil),         // 12: dapr.proto.runtime.v1.ConversationToolsFunction
	(*ConversationResult)(nil),                // 13: dapr.proto.runtime.v1.ConversationResult
	(*ConversationResultChoices)(nil),         // 14: dapr.proto.runtime.v1.ConversationResultChoices
	(*ConversationResponse)(nil),              // 15: dapr.proto.runtime.v1.ConversationResponse
	nil,                                       // 16: dapr.proto.runtime.v1.ConversationRequest.ParametersEntry
	nil,                                       // 17: dapr.proto.runtime.v1.ConversationRequest.MetadataEntry
	nil,                                       // 18: dapr.proto.runtime.v1.ConversationFunctionCall.ArgumentsEntry
	nil,                                       // 19: dapr.proto.runtime.v1.ConversationToolsFunction.ParametersEntry
	nil,                                       // 20: dapr.proto.runtime.v1.ConversationResult.ParametersEntry
	(*wrapperspb.StringValue)(nil),            // 21: google.protobuf.StringValue
	(*anypb.Any)(nil),                         // 22: google.protobuf.Any
}
var file_dapr_proto_runtime_v1_conversation_proto_depIdxs = []int32{
	1,  // 0: dapr.proto.runtime.v1.ConversationRequest.inputs:type_name -> dapr.proto.runtime.v1.ConversationInput
	16, // 1: dapr.proto.runtime.v1.ConversationRequest.parameters:type_name -> dapr.proto.runtime.v1.ConversationRequest.ParametersEntry
	17, // 2: dapr.proto.runtime.v1.ConversationRequest.metadata:type_name -> dapr.proto.runtime.v1.ConversationRequest.MetadataEntry
	11, // 3: dapr.proto.runtime.v1.ConversationRequest.tools:type_name -> dapr.proto.runtime.v1.ConversationTools
	21, // 4: dapr.proto.runtime.v1.ConversationRequest.tool_choice:type_name -> google.protobuf.StringValue
	2,  // 5: dapr.proto.runtime.v1.ConversationInput.messages:type_name -> dapr.proto.runtime.v1.ConversationMessage
	3,  // 6: dapr.proto.runtime.v1.ConversationMessage.of_developer:type_name -> dapr.proto.runtime.v1.ConversationMessageOfDeveloper
	4,  // 7: dapr.proto.runtime.v1.ConversationMessage.of_system:type_name -> dapr.proto.runtime.v1.ConversationMessageOfSystem
	5,  // 8: dapr.proto.runtime.v1.ConversationMessage.of_user:type_name -> dapr.proto.runtime.v1.ConversationMessageOfUser
	6,  // 9: dapr.proto.runtime.v1.ConversationMessage.of_assistant:type_name -> dapr.proto.runtime.v1.ConversationMessageOfAssistant
	7,  // 10: dapr.proto.runtime.v1.ConversationMessage.of_tool:type_name -> dapr.proto.runtime.v1.ConversationMessageOfTool
	21, // 11: dapr.proto.runtime.v1.ConversationMessageOfDeveloper.name:type_name -> google.protobuf.StringValue
	21, // 12: dapr.proto.runtime.v1.ConversationMessageOfDeveloper.role:type_name -> google.protobuf.StringValue
	10, // 13: dapr.proto.runtime.v1.ConversationMessageOfDeveloper.Content:type_name -> dapr.proto.runtime.v1.ConversationContentMessageContent
	21, // 14: dapr.proto.runtime.v1.ConversationMessageOfSystem.name:type_name -> google.protobuf.StringValue
	21, // 15: dapr.proto.runtime.v1.ConversationMessageOfSystem.role:type_name -> google.protobuf.StringValue
	10, // 16: dapr.proto.runtime.v1.ConversationMessageOfSystem.Content:type_name -> dapr.proto.runtime.v1.ConversationContentMessageContent
	21, // 17: dapr.proto.runtime.v1.ConversationMessageOfUser.name:type_name -> google.protobuf.StringValue
	21, // 18: dapr.proto.runtime.v1.ConversationMessageOfUser.role:type_name -> google.protobuf.StringValue
	10, // 19: dapr.proto.runtime.v1.ConversationMessageOfUser.Content:type_name -> dapr.proto.runtime.v1.ConversationContentMessageContent
	21, // 20: dapr.proto.runtime.v1.ConversationMessageOfAssistant.refusal:type_name -> google.protobuf.StringValue
	21, // 21: dapr.proto.runtime.v1.ConversationMessageOfAssistant.name:type_name -> google.protobuf.StringValue
	10, // 22: dapr.proto.runtime.v1.ConversationMessageOfAssistant.Content:type_name -> dapr.proto.runtime.v1.ConversationContentMessageContent
	8,  // 23: dapr.proto.runtime.v1.ConversationMessageOfAssistant.tool_calls:type_name -> dapr.proto.runtime.v1.ConversationToolCalls
	21, // 24: dapr.proto.runtime.v1.ConversationMessageOfTool.tool_id:type_name -> google.protobuf.StringValue
	21, // 25: dapr.proto.runtime.v1.ConversationMessageOfTool.role:type_name -> google.protobuf.StringValue
	10, // 26: dapr.proto.runtime.v1.ConversationMessageOfTool.Content:type_name -> dapr.proto.runtime.v1.ConversationContentMessageContent
	21, // 27: dapr.proto.runtime.v1.ConversationToolCalls.id:type_name -> google.protobuf.StringValue
	9,  // 28: dapr.proto.runtime.v1.ConversationToolCalls.function:type_name -> dapr.proto.runtime.v1.ConversationFunctionCall
	21, // 29: dapr.proto.runtime.v1.ConversationToolCalls.type:type_name -> google.protobuf.StringValue
	21, // 30: dapr.proto.runtime.v1.ConversationFunctionCall.name:type_name -> google.protobuf.StringValue
	18, // 31: dapr.proto.runtime.v1.ConversationFunctionCall.arguments:type_name -> dapr.proto.runtime.v1.ConversationFunctionCall.ArgumentsEntry
	21, // 32: dapr.proto.runtime.v1.ConversationContentMessageContent.text:type_name -> google.protobuf.StringValue
	21, // 33: dapr.proto.runtime.v1.ConversationContentMessageContent.type:type_name -> google.protobuf.StringValue
	12, // 34: dapr.proto.runtime.v1.ConversationTools.function:type_name -> dapr.proto.runtime.v1.ConversationToolsFunction
	21, // 35: dapr.proto.runtime.v1.ConversationToolsFunction.name:type_name -> google.protobuf.StringValue
	21, // 36: dapr.proto.runtime.v1.ConversationToolsFunction.description:type_name -> google.protobuf.StringValue
	19, // 37: dapr.proto.runtime.v1.ConversationToolsFunction.parameters:type_name -> dapr.proto.runtime.v1.ConversationToolsFunction.ParametersEntry
	14, // 38: dapr.proto.runtime.v1.ConversationResult.choices:type_name -> dapr.proto.runtime.v1.ConversationResultChoices
	20, // 39: dapr.proto.runtime.v1.ConversationResult.parameters:type_name -> dapr.proto.runtime.v1.ConversationResult.ParametersEntry
	21, // 40: dapr.proto.runtime.v1.ConversationResultChoices.finish_reason:type_name -> google.protobuf.StringValue
	21, // 41: dapr.proto.runtime.v1.ConversationResultChoices.message:type_name -> google.protobuf.StringValue
	13, // 42: dapr.proto.runtime.v1.ConversationResponse.outputs:type_name -> dapr.proto.runtime.v1.ConversationResult
	22, // 43: dapr.proto.runtime.v1.ConversationRequest.ParametersEntry.value:type_name -> google.protobuf.Any
	22, // 44: dapr.proto.runtime.v1.ConversationFunctionCall.ArgumentsEntry.value:type_name -> google.protobuf.Any
	22, // 45: dapr.proto.runtime.v1.ConversationToolsFunction.ParametersEntry.value:type_name -> google.protobuf.Any
	22, // 46: dapr.proto.runtime.v1.ConversationResult.ParametersEntry.value:type_name -> google.protobuf.Any
	47, // [47:47] is the sub-list for method output_type
	47, // [47:47] is the sub-list for method input_type
	47, // [47:47] is the sub-list for extension type_name
	47, // [47:47] is the sub-list for extension extendee
	0,  // [0:47] is the sub-list for field type_name
}

func init() { file_dapr_proto_runtime_v1_conversation_proto_init() }
func file_dapr_proto_runtime_v1_conversation_proto_init() {
	if File_dapr_proto_runtime_v1_conversation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dapr_proto_runtime_v1_conversation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dapr_proto_runtime_v1_conversation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dapr_proto_runtime_v1_conversation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dapr_proto_runtime_v1_conversation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationMessageOfDeveloper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dapr_proto_runtime_v1_conversation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationMessageOfSystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dapr_proto_runtime_v1_conversation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationMessageOfUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dapr_proto_runtime_v1_conversation_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationMessageOfAssistant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dapr_proto_runtime_v1_conversation_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationMessageOfTool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dapr_proto_runtime_v1_conversation_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationToolCalls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dapr_proto_runtime_v1_conversation_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationFunctionCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dapr_proto_runtime_v1_conversation_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationContentMessageContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dapr_proto_runtime_v1_conversation_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationTools); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dapr_proto_runtime_v1_conversation_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationToolsFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dapr_proto_runtime_v1_conversation_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dapr_proto_runtime_v1_conversation_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationResultChoices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dapr_proto_runtime_v1_conversation_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dapr_proto_runtime_v1_conversation_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_dapr_proto_runtime_v1_conversation_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_dapr_proto_runtime_v1_conversation_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*ConversationMessage_OfDeveloper)(nil),
		(*ConversationMessage_OfSystem)(nil),
		(*ConversationMessage_OfUser)(nil),
		(*ConversationMessage_OfAssistant)(nil),
		(*ConversationMessage_OfTool)(nil),
	}
	file_dapr_proto_runtime_v1_conversation_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_dapr_proto_runtime_v1_conversation_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_dapr_proto_runtime_v1_conversation_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_dapr_proto_runtime_v1_conversation_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_dapr_proto_runtime_v1_conversation_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_dapr_proto_runtime_v1_conversation_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_dapr_proto_runtime_v1_conversation_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_dapr_proto_runtime_v1_conversation_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*ConversationTools_Function)(nil),
	}
	file_dapr_proto_runtime_v1_conversation_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_dapr_proto_runtime_v1_conversation_proto_msgTypes[15].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dapr_proto_runtime_v1_conversation_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dapr_proto_runtime_v1_conversation_proto_goTypes,
		DependencyIndexes: file_dapr_proto_runtime_v1_conversation_proto_depIdxs,
		MessageInfos:      file_dapr_proto_runtime_v1_conversation_proto_msgTypes,
	}.Build()
	File_dapr_proto_runtime_v1_conversation_proto = out.File
	file_dapr_proto_runtime_v1_conversation_proto_rawDesc = nil
	file_dapr_proto_runtime_v1_conversation_proto_goTypes = nil
	file_dapr_proto_runtime_v1_conversation_proto_depIdxs = nil
}
