/*
Copyright 2025 The Dapr Authors
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package dapr.proto.runtime.v1;

import "google/protobuf/any.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/dapr/dapr/pkg/proto/runtime/v1;runtime";

// ConversationRequest is the request object for Conversation.
// Many of these fields are inspired by openai.ChatCompletionNewParams
// https://github.com/openai/openai-go/blob/main/chatcompletion.go#L2106
message ConversationRequest {
  // The name of Conversation component
  string name = 1;

  // The ID of an existing chat (like in ChatGPT)
  optional string contextID = 2;

  // Inputs for the conversation, support multiple input in one time.
  // Deprecating in favor of ConversationInputV2
  repeated ConversationInput inputs = 3;

  // Parameters for all custom fields.
  map<string, google.protobuf.Any> parameters = 4;

  // The metadata passing to conversation components.
  map<string, string> metadata = 5;

  // Scrub PII data that comes back from the LLM
  optional bool scrubPII = 6;

  // Temperature for the LLM to optimize for creativity or predictability
  optional double temperature = 7;

  // Tools register the tools available to be used by the LLM during the conversation.
  // These are sent on a per request basis.
  // The tools available during the first round of the conversation
  // may be different than tools specified later on.
  repeated ConversationTools tools = 8;

  // Controls which (if any) tool is called by the model. 
  // `none` means the model will not call any tool and instead generates a message. 
  // `auto` means the model can pick between generating a message or calling one or more tools. 
  // `required` means the model must call one or more tools. 
  // Specifying a particular tool via:
	// `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that tool.
	// `none` is the default when no tools are present.
  // `auto` is the default if tools are present.
  optional google.protobuf.StringValue tool_choice = 9; // TODO(@Sicoyle): This actually is not a string in openai lol so need to fix this one

  // replacing ConversationInput field
  repeated ConversationInputV2 inputs_v2 = 10;

  /* TODO: fields to bring in from openai.ChatCompletionNewParams after Dapr 1.16.
  Note: They can be within the other messages, not necessarily top level here.
  MaxCompletionTokens: https://github.com/openai/openai-go/blob/main/chatcompletion.go#L2131
  Audio: https://github.com/openai/openai-go/blob/main/chatcompletion.go#L2186
  Modalities: https://github.com/openai/openai-go/blob/main/chatcompletion.go#L2215
  ReasoningEffort: https://github.com/openai/openai-go/blob/main/chatcompletion.go#L2224
  Stop: https://github.com/openai/openai-go/blob/main/chatcompletion.go#L2249 <----------------should we bring this in?
  StreamOptions: https://github.com/openai/openai-go/blob/main/chatcompletion.go#L2251
  ResponseFormat: https://github.com/openai/openai-go/blob/main/chatcompletion.go#L2284
  */
}

// maintained for backwards compatibility,
// and we will move to ConversationInputV2 instead in future.
message ConversationInput {
  // The content to send to the llm
  repeated ConversationMessage messages = 1;

  // Scrub PII data that goes into the LLM
  optional bool scrubPII = 3;
}


// directly inspired by openai.ChatCompletionNewParams
// https://github.com/openai/openai-go/blob/main/chatcompletion.go#L2106
message ConversationInputV2 {
  // The content to send to the llm
  repeated ConversationMessage messages = 1;

  // Scrub PII data that goes into the LLM
  optional bool scrubPII = 3;
}

// inspired by openai.ChatCompletionMessageParamUnion
// https://github.com/openai/openai-go/blob/main/chatcompletion.go#L1449
// Note: I've made role inherent to the type of ConversationMessage 
// (before we had it nested as a standalone field under ConversationInput)
// so none of these message_types have this role field as required I will propagate it in the backend.
message ConversationMessage {
  oneof message_types {
    ConversationMessageOfDeveloper of_developer = 1;
    ConversationMessageOfSystem of_system = 2;
    ConversationMessageOfUser of_user = 3;
    ConversationMessageOfAssistant of_assistant = 4;
    ConversationMessageOfTool of_tool = 5;  // HERE
    // Note: there could be a ConversationMessageOfFunction type, 
    // but that is deprecated in openai, so we will not support this.
  }
}

// inspired by openai.ChatCompletionDeveloperMessageParam
// https://github.com/openai/openai-go/blob/main/chatcompletion.go#L1130
message ConversationMessageOfDeveloper {
  optional google.protobuf.StringValue name = 1;
  optional google.protobuf.StringValue role = 2; // defaults to "developer"
  repeated ConversationContentMessageContent content = 3;

}

// inspired by openai.ChatCompletionSystemMessageParam
// https://github.com/openai/openai-go/blob/main/chatcompletion.go#L1842
message ConversationMessageOfSystem {
  optional google.protobuf.StringValue name = 1;
  optional google.protobuf.StringValue role = 2; // defaults to "system"
  repeated ConversationContentMessageContent content = 3;
}

// inspired by openai.ChatCompletionUserMessageParam
// https://github.com/openai/openai-go/blob/main/chatcompletion.go#L2060C6-L2060C36
message ConversationMessageOfUser {
  optional google.protobuf.StringValue name = 1;
  optional google.protobuf.StringValue role = 2;  // defaults to "user"
  repeated ConversationContentMessageContent content = 3;
}

// inspired by openai.ChatCompletionAssistantMessageParam
// https://github.com/openai/openai-go/blob/main/chatcompletion.go#L310
message ConversationMessageOfAssistant {
  optional google.protobuf.StringValue name = 1;
  optional google.protobuf.StringValue role = 2; // defaults to "assistant"

  // TODO: there is an audio field here to bring in when the time comes 1.17 or later.

  repeated ConversationContentMessageContent content = 3; // TODO(@Sicoyle): FIX THIS this is a diff content type whatttt -> check my other content types...

  // Tool calls generated by the model, such as function calls for the client to then make.
  ConversationToolCalls tool_calls = 4;

  optional google.protobuf.StringValue refusal = 5;

  // Note: There is a FunctionCall type too that is deprecated, so we are not bringing that to dapr.
}

// inspired by openai.ChatCompletionToolMessageParam
// https://github.com/openai/openai-go/blob/main/chatcompletion.go#L2011
message ConversationMessageOfTool {
  optional google.protobuf.StringValue tool_id = 1;
  optional google.protobuf.StringValue role = 2; // defaults to "tool"
  repeated ConversationContentMessageContent content = 3;
}

// inspired by openai.ChatCompletionMessageToolCallParam
// https://github.com/openai/openai-go/blob/main/chatcompletion.go#L1669
message ConversationToolCalls {
    optional google.protobuf.StringValue id = 1;

    // TODO: bring out to diff msg below here as a one of for us
    ConversationFunctionCall function = 2;
    optional google.protobuf.StringValue type = 3; // backend will default to "function", but optional for future

}

// inspired by openai.ChatCompletionMessageToolCallFunctionParam
// https://github.com/openai/openai-go/blob/main/chatcompletion.go#L1692
message ConversationFunctionCall {
  google.protobuf.StringValue name = 1;
  map<string, google.protobuf.Any> arguments = 2;
}

// inspired by openai.ChatCompletionContentPartTextParam & openai.ChatCompletionDeveloperMessageParamContentUnion
// https://github.com/openai/openai-go/blob/main/chatcompletion.go#L1084
// https://github.com/openai/openai-go/blob/main/chatcompletion.go#L1154C6-L1154C53
// Note: openai has this message be either a message of string or message of array type,
// so instead of this, we support that in one message type instead.
message ConversationContentMessageContent {
  google.protobuf.StringValue text = 1;
  optional google.protobuf.StringValue type = 2; // do i keep this or just default backend to text?
}

// ConversationResult is the result for one input.
message ConversationResult {
  // Result for the one conversation input.
  // string result = 1; // was string before
  ConversationResultChoices choices = 1;
  // Parameters for all custom fields.
  map<string, google.protobuf.Any> parameters = 2;

  // The tool call name if set, indicates that the content corresponds to a tool call.
  // optional string tool_call_name = 3;
  // google.protobuf.StringValue instead?
  // optional ConversationToolCallRequest tool_call_request = 3;

  /* TODO bring in for 1.17 based on openai
  https://github.com/openai/openai-go/blob/main/chatcompletion.go#L166
  Usage https://github.com/openai/openai-go/blob/main/chatcompletion.go#L204

  Bring in 1.16:
  Created (timestamp): https://github.com/openai/openai-go/blob/main/chatcompletion.go#L173
  Model: https://github.com/openai/openai-go/blob/main/chatcompletion.go#L175
  */
}

// based on https://github.com/openai/openai-go/blob/main/chatcompletion.go#L226
message ConversationResultChoices {
  google.protobuf.StringValue finish_reason = 1;
  int64 index = 2;
  google.protobuf.StringValue message = 3;
}

// ConversationResponse is the response for Conversation.
message ConversationResponse {
  // The ID of an existing chat (like in ChatGPT)
  optional string contextID = 1;

  // An array of results.
  repeated ConversationResult outputs = 2;
}

// ConversationTools are the typed tools available to be called.
// inspired by openai.ChatCompletionToolParam
// https://github.com/openai/openai-go/blob/main/chatcompletion.go#L1950
message ConversationTools {
  oneof tool_types {
    ConversationToolsFunction function = 1;
  }
}

// ConversationToolsFunction is the main tool type to be used in a conversation.
// inspired by openai.FunctionDefinitionParam
// https://pkg.go.dev/github.com/openai/openai-go/shared#FunctionDefinitionParam
message ConversationToolsFunction {
  // The name of the function to be called.
  google.protobuf.StringValue name = 1;

  // A description of what the function does, 
  // used by the model to choose when and how to call the function.
  optional google.protobuf.StringValue description = 2;

  // The parameters the functions accepts, described as a JSON Schema object. 
  // See the [guide](https://platform.openai.com/docs/guides/function-calling) for examples,
  // and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.	
  // Omitting `parameters` defines a function with an empty parameter list.
  map<string, google.protobuf.Any> parameters = 3;
}